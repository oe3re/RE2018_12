Microsoft (R) Macro Assembler Version 14.00.23506.0	    05/25/18 01:06:53
Zadatak_12.asm						     Page 1 - 1


				INCLUDE Irvine32.inc
			      C ; Include file for Irvine32.lib             (Irvine32.inc)
			      C 
			      C ;OPTION CASEMAP:NONE		; optional: make identifiers case-sensitive
			      C 
			      C INCLUDE SmallWin.inc		; MS-Windows prototypes, structures, and constants
			      C .NOLIST
			      C .LIST
			      C 
			      C INCLUDE VirtualKeys.inc
			      C ; VirtualKeys.inc
			      C .NOLIST
			      C .LIST
			      C 
			      C 
			      C .NOLIST
			      C .LIST
			      C 

 = 0000000B			BufSize = 11 ;//velicina buffera. Izabrano je 11 polja jer je najveca dozvoljena otpornost 999 Moma,
							 ;//dakle 7 cifara plus 0dh i 0ah za novi red

 00000000			.data

				;//stringovi za iscrtavanje boja
 00000000 2E 2E 43 52 4E	str1 byte "..CRNA..", 0
	   41 2E 2E 00
 00000009 20 20 20 00		str2 byte "   ", 0
 0000000D 0D 0A 00		str3 byte 0dh, 0ah, 0

				;//stringovi za ispisivanje odgovarajucih poruka

 00000010			porUnosa LABEL BYTE
 00000010  55 6E 65 73 69	BYTE "Unesi zeljenu vrednost otpornika (vrednost 0oma gasi program)...", 0dh, 0ah
	   20 7A 65 6C 6A
	   65 6E 75 20 76
	   72 65 64 6E 6F
	   73 74 20 6F 74
	   70 6F 72 6E 69
	   6B 61 20 28 76
	   72 65 64 6E 6F
	   73 74 20 30 6F
	   6D 61 20 67 61
	   73 69 20 70 72
	   6F 67 72 61 6D
	   29 2E 2E 2E 0D
	   0A
 00000052 00000042		porUnDuz DWORD($ - porUnosa)
 00000056 00000000		ispisanoBY DWORD ?

 0000005A			porLosaVr LABEL BYTE
 0000005A  55 6E 65 74 61	BYTE "Uneta vrednost nije standardna...", 0dh, 0ah
	   20 76 72 65 64
	   6E 6F 73 74 20
	   6E 69 6A 65 20
	   73 74 61 6E 64
	   61 72 64 6E 61
	   2E 2E 2E 0D 0A
 0000007D 00000023		porLVDuz DWORD($ - porLosaVr)
 00000081 00000000		ispisBY DWORD ?

 00000085  0000000B [		buffer BYTE BufSize DUP(? )
	    00
	   ]
 00000090 00000000		procitanoBY DWORD ?

 00000094 00000000		consoleHandle HANDLE 0

 00000098 00000000		otpornost DWORD 0
 0000009C 00000000		cifra DWORD ?
 000000A0 00000000		stepen10 DWORD ?
 000000A4 00000000		pomocna DWORD ?
 000000A8 0000			prsten1 WORD 0
 000000AA 0000			prsten2 WORD 0
 000000AC 0000			prsten3 WORD 0
 000000AE 0000			prsten4 WORD 0
 000000B0 0000			pom WORD 0

 00000000			.code

 00000000			kodirajBoju proc c uses eax ulazni : word

 00000000  55		   *	    push   ebp
 00000001  8B EC	   *	    mov    ebp, esp
 00000003  50		   *	    push   eax
 00000004  BB 00000000			mov ebx, 0
 00000009  66| 3B 5D 08			cmp bx, ulazni
 0000000D  75 0F			jne necrna
 0000000F  C7 05 0000009C R		mov cifra, 128
	   00000080
 00000019  E9 000000D8			jmp obojeno
 0000001E			necrna :

 0000001E  BB 00000001			mov ebx, 1
 00000023  66| 3B 5D 08			cmp bx, ulazni
 00000027  75 0F			jne nebraon
 00000029  C7 05 0000009C R		mov cifra, 4
	   00000004
 00000033  E9 000000BE			jmp obojeno
 00000038			nebraon :

 00000038  BB 00000002			mov ebx, 2
 0000003D  66| 3B 5D 08			cmp bx, ulazni
 00000041  75 0F			jne necrvena
 00000043  C7 05 0000009C R		mov cifra, 12
	   0000000C
 0000004D  E9 000000A4			jmp obojeno
 00000052			necrvena :

 00000052  BB 00000003			mov ebx, 3
 00000057  66| 3B 5D 08			cmp bx, ulazni
 0000005B  75 0F			jne nenarandzasta
 0000005D  C7 05 0000009C R		mov cifra, 6
	   00000006
 00000067  E9 0000008A			jmp obojeno
 0000006C			nenarandzasta :

 0000006C  BB 00000004			mov ebx, 4
 00000071  66| 3B 5D 08			cmp bx, ulazni
 00000075  75 0C			jne nezuta
 00000077  C7 05 0000009C R		mov cifra, 14
	   0000000E
 00000081  EB 73			jmp obojeno
 00000083			nezuta :

 00000083  BB 00000005			mov ebx, 5
 00000088  66| 3B 5D 08			cmp bx, ulazni
 0000008C  75 0C			jne nezelena
 0000008E  C7 05 0000009C R		mov cifra, 2
	   00000002
 00000098  EB 5C			jmp obojeno
 0000009A			nezelena :

 0000009A  BB 00000006			mov ebx, 6
 0000009F  66| 3B 5D 08			cmp bx, ulazni
 000000A3  75 0C			jne neplava
 000000A5  C7 05 0000009C R		mov cifra, 9
	   00000009
 000000AF  EB 45			jmp obojeno
 000000B1			neplava :

 000000B1  BB 00000007			mov ebx, 7
 000000B6  66| 3B 5D 08			cmp bx, ulazni
 000000BA  75 0C			jne neljubicasta
 000000BC  C7 05 0000009C R		mov cifra, 5
	   00000005
 000000C6  EB 2E			jmp obojeno
 000000C8			neljubicasta :

 000000C8  BB 00000008			mov ebx, 8
 000000CD  66| 3B 5D 08			cmp bx, ulazni
 000000D1  75 0C			jne nesiva
 000000D3  C7 05 0000009C R		mov cifra, 7
	   00000007
 000000DD  EB 17			jmp obojeno
 000000DF			nesiva :

 000000DF  BB 00000009			mov ebx, 9
 000000E4  66| 3B 5D 08			cmp bx, ulazni
 000000E8  75 0C			jne nebela
 000000EA  C7 05 0000009C R		mov cifra, 15
	   0000000F
 000000F4  EB 00			jmp obojeno
 000000F6			nebela :

 000000F6			obojeno :

					ret
 000000F6  58		   *	    pop    eax
 000000F7  C9		   *	    leave  
 000000F8  C3		   *	    ret    00000h
 000000F9			kodirajBoju endp

 000000F9			prikaziPrstenove proc c uses eax,
							arg1 : word, arg2 : word, arg3 : word, arg4 : word

 000000F9  55		   *	    push   ebp
 000000FA  8B EC	   *	    mov    ebp, esp
 000000FC  50		   *	    push   eax
 000000FD  33 C0			xor eax, eax
 000000FF  33 DB			xor ebx, ebx

 00000101  BA 0000000D R		mov edx, offset str3
 00000106  E8 00000000 E		call writestring

 0000010B  B9 00000005			mov ecx, 5

 00000110			oboji :

 00000110  B8 00000000			mov eax, 0
 00000115  E8 00000000 E		call SetTextColor
 0000011A  BA 00000009 R		mov edx, offset str2
 0000011F  E8 00000000 E		call writestring

 00000124  66| 8B 5D 08			mov bx, arg1
 00000128  B8 00000010			mov eax, 16
 0000012D  F7 E3			mul ebx
 0000012F  03 C3			add eax, ebx
 00000131  E8 00000000 E		call SetTextColor
 00000136  BA 00000000 R		mov edx, offset str1
 0000013B  E8 00000000 E		call writestring

 00000140  B8 00000000			mov eax, 0
 00000145  E8 00000000 E		call SetTextColor
 0000014A  BA 00000009 R		mov edx, offset str2
 0000014F  E8 00000000 E		call writestring

 00000154  66| 8B 5D 0C			mov bx, arg2
 00000158  B8 00000010			mov eax, 16
 0000015D  F7 E3			mul ebx
 0000015F  03 C3			add eax, ebx
 00000161  E8 00000000 E		call SetTextColor
 00000166  BA 00000000 R		mov edx, offset str1
 0000016B  E8 00000000 E		call writestring

 00000170  B8 00000000			mov eax, 0
 00000175  E8 00000000 E		call SetTextColor
 0000017A  BA 00000009 R		mov edx, offset str2
 0000017F  E8 00000000 E		call writestring

 00000184  66| 8B 5D 10			mov bx, arg3
 00000188  B8 00000010			mov eax, 16
 0000018D  F7 E3			mul ebx
 0000018F  03 C3			add eax, ebx
 00000191  E8 00000000 E		call SetTextColor
 00000196  BA 00000000 R		mov edx, offset str1
 0000019B  E8 00000000 E		call writestring

 000001A0  B8 00000000			mov eax, 0
 000001A5  E8 00000000 E		call SetTextColor
 000001AA  BA 00000009 R		mov edx, offset str2
 000001AF  E8 00000000 E		call writestring

 000001B4  66| 8B 5D 14			mov bx, arg4
 000001B8  B8 00000010			mov eax, 16
 000001BD  F7 E3			mul ebx
 000001BF  03 C3			add eax, ebx
 000001C1  E8 00000000 E		call SetTextColor
 000001C6  BA 00000000 R		mov edx, offset str1
 000001CB  E8 00000000 E		call writestring

 000001D0  BA 0000000D R		mov edx, offset str3
 000001D5  E8 00000000 E		call writestring

 000001DA  49				dec ecx
 000001DB  0F 85 FFFFFF2F		jnz oboji

					ret
 000001E1  58		   *	    pop    eax
 000001E2  C9		   *	    leave  
 000001E3  C3		   *	    ret    00000h
 000001E4			prikaziPrstenove endp


 000001E4			main proc

 000001E4				unesi_novu_vrednost: ;// stvorena petlja kako bi korisnik mogao da unosi nove vrednosti, bez stalnog gasenja i paljenja programa

 000001E4  B8 0000000F			mov eax, 15 ;// kako bi tekst bio beo na crnoj pozadini
 000001E9  E8 00000000 E		call SetTextColor

					;// pocetne vrednosti prstenova na otporniku
 000001EE  66| C7 05			mov prsten1, 0
	   000000A8 R
	   0000
 000001F7  66| C7 05			mov prsten2, 0
	   000000AA R
	   0000
 00000200  66| C7 05			mov prsten3, 0
	   000000AC R
	   0000
 00000209  66| C7 05			mov prsten4, 0
	   000000AE R
	   0000
					;// vrednost otpornosti i pomocne promenljive
 00000212  C7 05 00000098 R		mov otpornost, 0
	   00000000
 0000021C  66| C7 05			mov pom, 0
	   000000B0 R
	   0000

					;// ciscenje registara
 00000225  33 C0			xor eax, eax
 00000227  33 DB			xor ebx, ebx
 00000229  33 D2			xor edx, edx
 0000022B  33 C9			xor ecx, ecx

					;// ispisivanje poruke za unos i preuzimanje unete vrednosti
					INVOKE GetStdHandle, STD_OUTPUT_HANDLE
 0000022D  6A F5	   *	    push    -00000000Bh
 0000022F  E8 00000000 E   *	    call   GetStdHandle
 00000234  A3 00000094 R		mov consoleHandle, eax

					INVOKE WriteConsole, consoleHandle, ADDR porUnosa, porUnDuz, ADDR ispisanoBY, 0
 00000239  6A 00	   *	    push   +000000000h
 0000023B  68 00000056 R   *	    push   OFFSET ispisanoBY
 00000240  FF 35 00000052 R *	    push   porUnDuz
 00000246  68 00000010 R   *	    push   OFFSET porUnosa
 0000024B  FF 35 00000094 R *	    push   consoleHandle
 00000251  E8 00000000 E   *	    call   WriteConsoleA

					INVOKE GetStdHandle, STD_INPUT_HANDLE
 00000256  6A F6	   *	    push    -00000000Ah
 00000258  E8 00000000 E   *	    call   GetStdHandle
 0000025D  A3 00000094 R		mov consoleHandle, eax

					INVOKE ReadConsole, consoleHandle, ADDR buffer,
					BufSize, ADDR procitanoBY, 0
 00000262  6A 00	   *	    push   +000000000h
 00000264  68 00000090 R   *	    push   OFFSET procitanoBY
 00000269  6A 0B	   *	    push   +00000000Bh
 0000026B  68 00000085 R   *	    push   OFFSET buffer
 00000270  FF 35 00000094 R *	    push   consoleHandle
 00000276  E8 00000000 E   *	    call   ReadConsoleA

					;// duzina procitanog stringa umanjena za 2 simbola (0dh, 0ah), daje broj cifara
 0000027B  A1 00000090 R		mov eax, procitanoBY
 00000280  83 E8 02			sub eax, 2
 00000283  A3 00000090 R		mov procitanoBY, eax

					;//ako otpornost ima vise od 2 cifre, skace na obradu, ako nema, upisuje direktno vrednosti prstenova
 00000288  BB 00000002			mov ebx, 2
 0000028D  3B C3			cmp eax, ebx
 0000028F  7F 4D			jg vise_od_dve
 00000291  BB 00000001			mov ebx, 1
 00000296  3B C3			cmp eax, ebx
 00000298  74 27	je ima_jednu
 0000029A  33 DB			xor ebx, ebx
 0000029C  8A 1D 00000085 R		mov bl, buffer[0]
 000002A2  83 EB 30			sub ebx, 48
 000002A5  66| 89 1D			mov prsten2, bx
	   000000AA R
 000002AC  8A 1D 00000086 R		mov bl, buffer[1]
 000002B2  83 EB 30			sub ebx, 48
 000002B5  66| 89 1D			mov prsten3, bx
	   000000AC R
 000002BC  E9 000001F1			jmp nemanula

 000002C1			ima_jednu:
 000002C1  8A 1D 00000085 R		mov bl, buffer[0]
 000002C7  83 EB 30			sub ebx, 48
 000002CA  8B C3			mov eax, ebx
 000002CC  0F 84 0000028D		jz kraj_rada ;//ukoliko je uneta vrednost otpornosti 0 oma, program se gasi
 000002D2  66| 89 1D			mov prsten3, bx
	   000000AC R
 000002D9  E9 000001D4			jmp nemanula
 000002DE			vise_od_dve:

					;//obrada ukoliko uneta otpornost ima vise od 2 cifre
 000002DE  8B 0D 00000090 R		mov ecx, procitanoBY ;//zadaje se counter
					;// ideja ove petlje je citati cifru po cifru iz bafera i
					;// mnoziti svaku sa odgovarajucim stepenom 10, zatim sabirati
					;// da bi se na kraju dobila otpornost kao integer umesto stringa
 000002E4			petlja1:
 000002E4  33 C0			xor eax, eax
 000002E6  33 DB			xor ebx, ebx
 000002E8  C7 05 000000A0 R		mov stepen10, 10
	   0000000A
 000002F2  8B 1D 00000090 R		mov ebx, procitanoBY
 000002F8  2B D9			sub ebx, ecx
 000002FA  8A 83 00000085 R		mov al, buffer[ebx]
 00000300  2C 30			sub al, 48 ;// iz bafera je procitana prva cifra kao znak iz ASCII tabele, te je 
					;// neophodno oduzeti od procitane vrednosti 48 kako bi se dobila cifra
 00000302  A3 0000009C R		mov cifra, eax ;// procitana cifra se upisuje u pomocnu promenljivu cifra
 00000307  51				push ecx ;// vrednost countera privremeno upisana na stack zbog promene istog 
 00000308  49				dec ecx
 00000309  8B C1			mov eax, ecx
 0000030B  74 14			jz poslCif
 0000030D  B8 00000001			mov eax, 1
					;// unutrasnja petlja za racunanje stepena 10 za svaku cifru
 00000312			unutrasnjaP :
 00000312  F7 25 000000A0 R		mul stepen10
 00000318  E2 F8			loop unutrasnjaP
 0000031A  A3 000000A0 R		mov stepen10, eax
 0000031F  EB 0A			jmp sracunato
 00000321			poslCif:
 00000321  C7 05 000000A0 R		mov stepen10, 1
	   00000001
 0000032B			sracunato :
 0000032B  59				pop ecx
 0000032C  8B 1D 000000A0 R		mov ebx, stepen10
 00000332  A1 0000009C R		mov eax, cifra
 00000337  F7 E3			mul ebx
 00000339  01 05 00000098 R		add otpornost, eax
 0000033F  E2 A3			loop petlja1

					;//ako otpornost ima 3 cifre, skace na kraj
 00000341  A1 00000090 R		mov eax, procitanoBY
 00000346  83 E8 03			sub eax, 3
 00000349  0F 84 000000B4		jz kraj

					;// ako otpornost ima vise od 3 cifre, proverava je i trazi najblizu
					;// zamenu ukoliko uneta vrednost nije standardna

 0000034F  8B 0D 00000090 R		mov ecx, procitanoBY
 00000355			petlja2:
 00000355  33 C0			xor eax, eax
 00000357  8B 1D 00000090 R		mov ebx, procitanoBY
 0000035D  2B D9			sub ebx, ecx
 0000035F  83 C3 03			add ebx, 3
 00000362  8A 83 00000085 R		mov al, buffer[ebx];// cita cifru po cifru iz bafera(4. cifru, 5. cifru...) i svaku uporedjuje sa nulom
 00000368  2C 30			sub al, 48
 0000036A  0F 84 00000083		jz ispravnaCif
					;// ukoliko neka od unetih cifara nakon prve 3 nije 0, ispisuje da uneta vrednost nije
					;// standardna i trazi najblizu zamenu
					INVOKE GetStdHandle, STD_OUTPUT_HANDLE
 00000370  6A F5	   *	    push    -00000000Bh
 00000372  E8 00000000 E   *	    call   GetStdHandle
 00000377  A3 00000094 R		mov consoleHandle, eax

					INVOKE WriteConsole, consoleHandle, ADDR porLosaVr, porLVDuz, ADDR ispisBY, 0
 0000037C  6A 00	   *	    push   +000000000h
 0000037E  68 00000081 R   *	    push   OFFSET ispisBY
 00000383  FF 35 0000007D R *	    push   porLVDuz
 00000389  68 0000005A R   *	    push   OFFSET porLosaVr
 0000038E  FF 35 00000094 R *	    push   consoleHandle
 00000394  E8 00000000 E   *	    call   WriteConsoleA

 00000399  8B 0D 00000090 R		mov ecx, procitanoBY
 0000039F  83 E9 03			sub ecx, 3
 000003A2  B8 00000001			mov eax, 1
 000003A7  BB 0000000A			mov ebx, 10
					;// odredjivanje stepena 10 npr za otpornost 12300 je 10^2, isto i za 12345
 000003AC			stepenpetlja:
 000003AC  F7 E3			mul ebx
 000003AE  E2 FC			loop stepenpetlja
 000003B0  A3 000000A0 R		mov stepen10, eax
 000003B5  A1 00000098 R		mov eax, otpornost 
 000003BA  F7 35 000000A0 R		div stepen10
 000003C0  F7 25 000000A0 R		mul stepen10
 000003C6  8B D8			mov ebx, eax
 000003C8  33 C0			xor eax, eax
 000003CA  33 D2			xor edx, edx
 000003CC  A1 000000A0 R		mov eax, stepen10
 000003D1  D1 E8			shr eax, 1	;//zamena za eax/2
 000003D3  03 C3			add eax, ebx ;// ovim smo nasli otpornost 12350 za slucaj unete otpornosti 12300
					 ;// sada je neophodno uporediti da li je uneta otpornost veca ili manja od 12350
					 ;// i time dobijamo standardnu vrednost koja je najbliza unetoj

 000003D5  2B 05 00000098 R		sub eax, otpornost
 000003DB  7E 08			jle manjaje
 000003DD  89 1D 00000098 R		mov otpornost, ebx
 000003E3  EB 1E			jmp losa_vrednost
 000003E5			manjaje:
 000003E5  03 1D 000000A0 R		add ebx, stepen10
 000003EB  89 1D 00000098 R		mov otpornost, ebx
 000003F1  EB 10			jmp losa_vrednost

 000003F3			ispravnaCif:
 000003F3  8B C1			mov eax, ecx
 000003F5  83 E8 04			sub eax, 4
 000003F8  74 09			jz kraj
 000003FA  49				dec ecx
 000003FB  8B C1			mov eax, ecx
 000003FD  0F 85 FFFFFF52		jnz petlja2 ;//koriscen jump umesto loop jer je broj operacija u ovoj petlji prevelik za loop
								
 00000403			losa_vrednost:
 00000403			kraj:

					;// u ovom trenutku imamo standardnu vrednost otpornosti bilo da je takvu uneo
					;// korisnik ili je program morao da je prilagodi

					;// sada upisuje vrednost prve 3 cifre promenljive otpornik u promenljive 
					;// prsten1, prsten2, prsten3
 00000403  B9 00000003			mov ecx,3
 00000408  A1 00000098 R		mov eax, otpornost
 0000040D  A3 000000A4 R		mov pomocna, eax
 00000412			loopPrstena:
					;// prvo izvlaci cifru
 00000412  B8 00000003			mov eax, 3
 00000417  2B C1			sub eax, ecx
 00000419  75 0A			jnz NPCifra
 0000041B  C7 05 0000009C R		mov cifra, 0
	   00000000
 00000425			NPCifra:
 00000425  A1 00000090 R		mov eax, procitanoBY
 0000042A  BB 00000003			mov ebx, 3
 0000042F  2B D9			sub ebx, ecx
 00000431  2B C3			sub eax, ebx
 00000433  51				push ecx
 00000434  8B C8			mov ecx, eax
 00000436  B8 00000001			mov eax, 1
 0000043B  BB 0000000A			mov ebx, 10
 00000440			loopUnutr:
 00000440  F7 E3			mul ebx
 00000442  E2 FC			loop loopUnutr
 00000444  59				pop ecx
 00000445  A3 000000A0 R		mov stepen10, eax
 0000044A  F7 25 0000009C R		mul cifra
 00000450  8B 1D 000000A4 R		mov ebx, pomocna
 00000456  2B D8			sub ebx, eax
 00000458  89 1D 000000A4 R		mov pomocna, ebx
 0000045E  A1 000000A0 R		mov eax, stepen10
 00000463  BE 0000000A			mov esi, 10
 00000468  F7 F6			div esi
 0000046A  8B F0			mov esi, eax
 0000046C  8B C3			mov eax, ebx
 0000046E  8B DE			mov ebx, esi
 00000470  F7 F3			div ebx
 00000472  A3 0000009C R		mov cifra, eax

					;//sad upisuje cifru u prsten1, prsten2 ili prsten3
 00000477  BB 00000003			mov ebx, 3
 0000047C  2B D9			sub ebx, ecx
 0000047E  75 06			jnz nije_prva
 00000480  66| A3			mov prsten1,ax
	   000000A8 R
 00000486			nije_prva:
 00000486  BB 00000002			mov ebx, 2
 0000048B  2B D9			sub ebx, ecx
 0000048D  75 06			jnz nije_druga
 0000048F  66| A3			mov prsten2, ax
	   000000AA R
 00000495			nije_druga:
 00000495  66| A3			mov prsten3, ax
	   000000AC R

 0000049B  49				dec ecx
 0000049C  0F 85 FFFFFF70		jnz loopPrstena

					;//prsten4 se odredjuje zasebno
 000004A2  A1 00000090 R		mov eax, procitanoBY
 000004A7  83 E8 03			sub eax, 3
 000004AA  7E 06			jng nemanula
 000004AC  66| A3			mov prsten4, ax
	   000000AE R
 000004B2			nemanula:

					;// kodiranje boja zbog asemblera po tabeli datoj u izvestaju
 000004B2  66| FF 35			push prsten1
	   000000A8 R
 000004B9  E8 FFFFFB42			call kodirajBoju ;// poziv procesa za kodiranje
 000004BE  83 C4 02			add esp, 2 ;// ciscenje stacka
 000004C1  A1 0000009C R		mov eax, cifra
 000004C6  66| A3			mov prsten1, ax
	   000000A8 R

 000004CC  66| FF 35			push prsten2
	   000000AA R
 000004D3  E8 FFFFFB28			call kodirajBoju
 000004D8  83 C4 02			add esp, 2
 000004DB  A1 0000009C R		mov eax, cifra
 000004E0  66| A3			mov prsten2, ax
	   000000AA R

 000004E6  66| FF 35			push prsten3
	   000000AC R
 000004ED  E8 FFFFFB0E			call kodirajBoju
 000004F2  83 C4 02			add esp, 2
 000004F5  A1 0000009C R		mov eax, cifra
 000004FA  66| A3			mov prsten3, ax
	   000000AC R

 00000500  66| FF 35			push prsten4
	   000000AE R
 00000507  E8 FFFFFAF4			call kodirajBoju
 0000050C  83 C4 02			add esp, 2
 0000050F  A1 0000009C R		mov eax, cifra
 00000514  66| A3			mov prsten4, ax
	   000000AE R

					;// vrednosti prstenova upisujemo na stack radi poziva procesa za iscrtavanje prstenova
 0000051A  66| FF 35			push pom
	   000000B0 R
 00000521  66| FF 35			push prsten4
	   000000AE R
 00000528  66| FF 35			push pom
	   000000B0 R
 0000052F  66| FF 35			push prsten3
	   000000AC R
 00000536  66| FF 35			push pom
	   000000B0 R
 0000053D  66| FF 35			push prsten2
	   000000AA R
 00000544  66| FF 35			push pom
	   000000B0 R
 0000054B  66| FF 35			push prsten1
	   000000A8 R

 00000552  E8 FFFFFBA2			call prikaziPrstenove ;// poziv procesa za iscrtavanje
 00000557  83 C4 10			add esp, 4 * 4 ;// ciscenje stacka 

 0000055A  E9 FFFFFC85			jmp unesi_novu_vrednost

 0000055F			kraj_rada:

					invoke ExitProcess,0
 0000055F  6A 00	   *	    push   +000000000h
 00000561  E8 00000000 E   *	    call   ExitProcess
 00000566			main endp
				end main
Microsoft (R) Macro Assembler Version 14.00.23506.0	    05/25/18 01:06:53
Zadatak_12.asm						     Symbols 2 - 1




Structures and Unions:

                N a m e                  Size
                                         Offset      Type

CONSOLE_CURSOR_INFO  . . . . . .	 00000008
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  bVisible . . . . . . . . . . .	 00000004	 DWord
CONSOLE_SCREEN_BUFFER_INFO . . .	 00000016
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  dwCursorPosition . . . . . . .	 00000004	 DWord
  wAttributes  . . . . . . . . .	 00000008	 Word
  srWindow . . . . . . . . . . .	 0000000A	 QWord
  dwMaximumWindowSize  . . . . .	 00000012	 DWord
COORD  . . . . . . . . . . . . .	 00000004
  X  . . . . . . . . . . . . . .	 00000000	 Word
  Y  . . . . . . . . . . . . . .	 00000002	 Word
FILETIME . . . . . . . . . . . .	 00000008
  loDateTime . . . . . . . . . .	 00000000	 DWord
  hiDateTime . . . . . . . . . .	 00000004	 DWord
FOCUS_EVENT_RECORD . . . . . . .	 00000004
  bSetFocus  . . . . . . . . . .	 00000000	 DWord
FPU_ENVIRON  . . . . . . . . . .	 0000001C
  controlWord  . . . . . . . . .	 00000000	 Word
  statusWord . . . . . . . . . .	 00000004	 Word
  tagWord  . . . . . . . . . . .	 00000008	 Word
  instrPointerOffset . . . . . .	 0000000C	 DWord
  instrPointerSelector . . . . .	 00000010	 DWord
  operandPointerOffset . . . . .	 00000014	 DWord
  operandPointerSelector . . . .	 00000018	 Word
INPUT_RECORD . . . . . . . . . .	 00000014
  EventType  . . . . . . . . . .	 00000000	 Word
  Event  . . . . . . . . . . . .	 00000004	 XmmWord
  bKeyDown . . . . . . . . . . .	 00000000	 DWord
  wRepeatCount . . . . . . . . .	 00000004	 Word
  wVirtualKeyCode  . . . . . . .	 00000006	 Word
  wVirtualScanCode . . . . . . .	 00000008	 Word
  uChar  . . . . . . . . . . . .	 0000000A	 Word
  UnicodeChar  . . . . . . . . .	 00000000	 Word
  AsciiChar  . . . . . . . . . .	 00000000	 Byte
  dwControlKeyState  . . . . . .	 0000000C	 DWord
  dwMousePosition  . . . . . . .	 00000000	 DWord
  dwButtonState  . . . . . . . .	 00000004	 DWord
  dwMouseControlKeyState . . . .	 00000008	 DWord
  dwEventFlags . . . . . . . . .	 0000000C	 DWord
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  dwCommandId  . . . . . . . . .	 00000000	 DWord
  bSetFocus  . . . . . . . . . .	 00000000	 DWord
KEY_EVENT_RECORD . . . . . . . .	 00000010
  bKeyDown . . . . . . . . . . .	 00000000	 DWord
  wRepeatCount . . . . . . . . .	 00000004	 Word
  wVirtualKeyCode  . . . . . . .	 00000006	 Word
  wVirtualScanCode . . . . . . .	 00000008	 Word
  uChar  . . . . . . . . . . . .	 0000000A	 Word
  UnicodeChar  . . . . . . . . .	 00000000	 Word
  AsciiChar  . . . . . . . . . .	 00000000	 Byte
  dwControlKeyState  . . . . . .	 0000000C	 DWord
MENU_EVENT_RECORD  . . . . . . .	 00000004
  dwCommandId  . . . . . . . . .	 00000000	 DWord
MOUSE_EVENT_RECORD . . . . . . .	 00000010
  dwMousePosition  . . . . . . .	 00000000	 DWord
  dwButtonState  . . . . . . . .	 00000004	 DWord
  dwMouseControlKeyState . . . .	 00000008	 DWord
  dwEventFlags . . . . . . . . .	 0000000C	 DWord
SMALL_RECT . . . . . . . . . . .	 00000008
  Left . . . . . . . . . . . . .	 00000000	 Word
  Top  . . . . . . . . . . . . .	 00000002	 Word
  Right  . . . . . . . . . . . .	 00000004	 Word
  Bottom . . . . . . . . . . . .	 00000006	 Word
SYSTEMTIME . . . . . . . . . . .	 00000010
  wYear  . . . . . . . . . . . .	 00000000	 Word
  wMonth . . . . . . . . . . . .	 00000002	 Word
  wDayOfWeek . . . . . . . . . .	 00000004	 Word
  wDay . . . . . . . . . . . . .	 00000006	 Word
  wHour  . . . . . . . . . . . .	 00000008	 Word
  wMinute  . . . . . . . . . . .	 0000000A	 Word
  wSecond  . . . . . . . . . . .	 0000000C	 Word
  wMilliseconds  . . . . . . . .	 0000000E	 Word
WINDOW_BUFFER_SIZE_RECORD  . . .	 00000004
  dwSize . . . . . . . . . . . .	 00000000	 DWord


Segments and Groups:

                N a m e                 Size     Length   Align   Combine Class

FLAT . . . . . . . . . . . . . .	GROUP
STACK  . . . . . . . . . . . . .	32 Bit	 00001000 Para	  Stack	  'STACK'	 
_DATA  . . . . . . . . . . . . .	32 Bit	 000000B2 Para	  Public  'DATA'	
_TEXT  . . . . . . . . . . . . .	32 Bit	 00000566 Para	  Public  'CODE'	


Procedures, parameters, and locals:

                N a m e                 Type     Value    Attr

CloseFile  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CloseHandle  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Clrscr . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CreateFileA  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CreateOutputFile . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Crlf . . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Delay  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
DumpMem  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
DumpRegs . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ExitProcess  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FileTimeToDosDateTime  . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FileTimeToSystemTime . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FlushConsoleInputBuffer  . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FormatMessageA . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetCommandLineA  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetCommandTail . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleCP . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleCursorInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleMode . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleScreenBufferInfo . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetDateTime  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetFileTime  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetKeyState  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetLastError . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetLocalTime . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetMaxXY . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetMseconds  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetNumberOfConsoleInputEvents  .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetProcessHeap . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetStdHandle . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetSystemTime  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetTextColor . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetTickCount . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Gotoxy . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapAlloc  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapCreate . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapDestroy  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapFree . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapSize . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
IsDigit  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
LocalFree  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MessageBoxA  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MsgBoxAsk  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MsgBox . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
OpenInputFile  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ParseDecimal32 . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ParseInteger32 . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
PeekConsoleInputA  . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Random32 . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
RandomRange  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Randomize  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadChar . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadConsoleA . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadConsoleInputA  . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadDec  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFile . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFloat  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFromFile . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadHex  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadInt  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadKeyFlush . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadKey  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadString . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleCursorInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleCursorPosition . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleMode . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleScreenBufferSize . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleTextAttribute  . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleTitleA . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleWindowInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetFilePointer . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetLocalTime . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetTextColor . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ShowFPUStack . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Sleep  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
StrLength  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_compare  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_copy . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_length . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_trim . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_ucase  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SystemTimeToFileTime . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WaitMsg  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteBinB  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteBin . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteChar  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleA  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleOutputAttribute  . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleOutputCharacterA . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteDec . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteFile  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteFloat . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteHexB  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteHex . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteInt . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteStackFrameName  . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteStackFrame  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteString  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteToFile  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteWindowsMsg  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
kodirajBoju  . . . . . . . . . .	P Near	 00000000 _TEXT	Length= 000000F9 Public C
  ulazni . . . . . . . . . . . .	Word	 bp + 00000008
  necrna . . . . . . . . . . . .	L Near	 0000001E _TEXT	
  nebraon  . . . . . . . . . . .	L Near	 00000038 _TEXT	
  necrvena . . . . . . . . . . .	L Near	 00000052 _TEXT	
  nenarandzasta  . . . . . . . .	L Near	 0000006C _TEXT	
  nezuta . . . . . . . . . . . .	L Near	 00000083 _TEXT	
  nezelena . . . . . . . . . . .	L Near	 0000009A _TEXT	
  neplava  . . . . . . . . . . .	L Near	 000000B1 _TEXT	
  neljubicasta . . . . . . . . .	L Near	 000000C8 _TEXT	
  nesiva . . . . . . . . . . . .	L Near	 000000DF _TEXT	
  nebela . . . . . . . . . . . .	L Near	 000000F6 _TEXT	
  obojeno  . . . . . . . . . . .	L Near	 000000F6 _TEXT	
main . . . . . . . . . . . . . .	P Near	 000001E4 _TEXT	Length= 00000382 Public STDCALL
  unesi_novu_vrednost  . . . . .	L Near	 000001E4 _TEXT	
  ima_jednu  . . . . . . . . . .	L Near	 000002C1 _TEXT	
  vise_od_dve  . . . . . . . . .	L Near	 000002DE _TEXT	
  petlja1  . . . . . . . . . . .	L Near	 000002E4 _TEXT	
  unutrasnjaP  . . . . . . . . .	L Near	 00000312 _TEXT	
  poslCif  . . . . . . . . . . .	L Near	 00000321 _TEXT	
  sracunato  . . . . . . . . . .	L Near	 0000032B _TEXT	
  petlja2  . . . . . . . . . . .	L Near	 00000355 _TEXT	
  stepenpetlja . . . . . . . . .	L Near	 000003AC _TEXT	
  manjaje  . . . . . . . . . . .	L Near	 000003E5 _TEXT	
  ispravnaCif  . . . . . . . . .	L Near	 000003F3 _TEXT	
  losa_vrednost  . . . . . . . .	L Near	 00000403 _TEXT	
  kraj . . . . . . . . . . . . .	L Near	 00000403 _TEXT	
  loopPrstena  . . . . . . . . .	L Near	 00000412 _TEXT	
  NPCifra  . . . . . . . . . . .	L Near	 00000425 _TEXT	
  loopUnutr  . . . . . . . . . .	L Near	 00000440 _TEXT	
  nije_prva  . . . . . . . . . .	L Near	 00000486 _TEXT	
  nije_druga . . . . . . . . . .	L Near	 00000495 _TEXT	
  nemanula . . . . . . . . . . .	L Near	 000004B2 _TEXT	
  kraj_rada  . . . . . . . . . .	L Near	 0000055F _TEXT	
prikaziPrstenove . . . . . . . .	P Near	 000000F9 _TEXT	Length= 000000EB Public C
  arg1 . . . . . . . . . . . . .	Word	 bp + 00000008
  arg2 . . . . . . . . . . . . .	Word	 bp + 0000000C
  arg3 . . . . . . . . . . . . .	Word	 bp + 00000010
  arg4 . . . . . . . . . . . . .	Word	 bp + 00000014
  oboji  . . . . . . . . . . . .	L Near	 00000110 _TEXT	
printf . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C
scanf  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C
wsprintfA  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C


Symbols:

                N a m e                 Type     Value    Attr

@CodeSize  . . . . . . . . . . .	Number	 00000000h   
@DataSize  . . . . . . . . . . .	Number	 00000000h   
@Interface . . . . . . . . . . .	Number	 00000003h   
@Model . . . . . . . . . . . . .	Number	 00000007h   
@code  . . . . . . . . . . . . .	Text   	 _TEXT
@data  . . . . . . . . . . . . .	Text   	 FLAT
@fardata?  . . . . . . . . . . .	Text   	 FLAT
@fardata . . . . . . . . . . . .	Text   	 FLAT
@stack . . . . . . . . . . . . .	Text   	 FLAT
ALT_MASK . . . . . . . . . . . .	Number	 00000003h   
BufSize  . . . . . . . . . . . .	Number	 0000000Bh   
CAPSLOCK_ON  . . . . . . . . . .	Number	 00000080h   
CREATE_ALWAYS  . . . . . . . . .	Number	 00000002h   
CREATE_NEW . . . . . . . . . . .	Number	 00000001h   
CTRL_MASK  . . . . . . . . . . .	Number	 0000000Ch   
CreateFile . . . . . . . . . . .	Text   	 CreateFileA
DO_NOT_SHARE . . . . . . . . . .	Number	 00000000h   
ENABLE_ECHO_INPUT  . . . . . . .	Number	 00000004h   
ENABLE_LINE_INPUT  . . . . . . .	Number	 00000002h   
ENABLE_MOUSE_INPUT . . . . . . .	Number	 00000010h   
ENABLE_PROCESSED_INPUT . . . . .	Number	 00000001h   
ENABLE_PROCESSED_OUTPUT  . . . .	Number	 00000001h   
ENABLE_WINDOW_INPUT  . . . . . .	Number	 00000008h   
ENABLE_WRAP_AT_EOL_OUTPUT  . . .	Number	 00000002h   
ENHANCED_KEY . . . . . . . . . .	Number	 00000100h   
FALSE  . . . . . . . . . . . . .	Number	 00000000h   
FILE_APPEND_DATA . . . . . . . .	Number	 00000004h   
FILE_ATTRIBUTE_ARCHIVE . . . . .	Number	 00000020h   
FILE_ATTRIBUTE_COMPRESSED  . . .	Number	 00000800h   
FILE_ATTRIBUTE_DEVICE  . . . . .	Number	 00000040h   
FILE_ATTRIBUTE_DIRECTORY . . . .	Number	 00000010h   
FILE_ATTRIBUTE_ENCRYPTED . . . .	Number	 00004000h   
FILE_ATTRIBUTE_HIDDEN  . . . . .	Number	 00000002h   
FILE_ATTRIBUTE_NORMAL  . . . . .	Number	 00000080h   
FILE_ATTRIBUTE_NOT_CONTENT_INDEXED .	Number	 00002000h   
FILE_ATTRIBUTE_OFFLINE . . . . .	Number	 00001000h   
FILE_ATTRIBUTE_READONLY  . . . .	Number	 00000001h   
FILE_ATTRIBUTE_REPARSE_POINT . .	Number	 00000400h   
FILE_ATTRIBUTE_SPARSE_FILE . . .	Number	 00000200h   
FILE_ATTRIBUTE_SYSTEM  . . . . .	Number	 00000004h   
FILE_ATTRIBUTE_TEMPORARY . . . .	Number	 00000100h   
FILE_BEGIN . . . . . . . . . . .	Number	 00000000h   
FILE_CURRENT . . . . . . . . . .	Number	 00000001h   
FILE_DELETE_CHILD  . . . . . . .	Number	 00000040h   
FILE_END . . . . . . . . . . . .	Number	 00000002h   
FILE_READ_DATA . . . . . . . . .	Number	 00000001h   
FILE_SHARE_DELETE  . . . . . . .	Number	 00000004h   
FILE_SHARE_READ  . . . . . . . .	Number	 00000001h   
FILE_SHARE_WRITE . . . . . . . .	Number	 00000002h   
FILE_WRITE_DATA  . . . . . . . .	Number	 00000002h   
FOCUS_EVENT  . . . . . . . . . .	Number	 00000010h   
FORMAT_MESSAGE_ALLOCATE_BUFFER .	Number	 00000100h   
FORMAT_MESSAGE_FROM_SYSTEM . . .	Number	 00001000h   
FormatMessage  . . . . . . . . .	Text   	 FormatMessageA
GENERIC_ALL  . . . . . . . . . .	Number	 10000000h   
GENERIC_EXECUTE  . . . . . . . .	Number	 20000000h   
GENERIC_READ . . . . . . . . . .	Number	 -80000000h   
GENERIC_WRITE  . . . . . . . . .	Number	 40000000h   
GetCommandLine . . . . . . . . .	Text   	 GetCommandLineA
HANDLE . . . . . . . . . . . . .	Text   	 DWORD
HEAP_GENERATE_EXCEPTIONS . . . .	Number	 00000004h   
HEAP_GROWABLE  . . . . . . . . .	Number	 00000002h   
HEAP_NO_SERIALIZE  . . . . . . .	Number	 00000001h   
HEAP_REALLOC_IN_PLACE_ONLY . . .	Number	 00000010h   
HEAP_ZERO_MEMORY . . . . . . . .	Number	 00000008h   
IDABORT  . . . . . . . . . . . .	Number	 00000003h   
IDCANCEL . . . . . . . . . . . .	Number	 00000002h   
IDCLOSE  . . . . . . . . . . . .	Number	 00000008h   
IDCONTINUE . . . . . . . . . . .	Number	 0000000Bh   
IDHELP . . . . . . . . . . . . .	Number	 00000009h   
IDIGNORE . . . . . . . . . . . .	Number	 00000005h   
IDNO . . . . . . . . . . . . . .	Number	 00000007h   
IDOK . . . . . . . . . . . . . .	Number	 00000001h   
IDRETRY  . . . . . . . . . . . .	Number	 00000004h   
IDTIMEOUT  . . . . . . . . . . .	Number	 00007D00h   
IDTRYAGAIN . . . . . . . . . . .	Number	 0000000Ah   
IDYES  . . . . . . . . . . . . .	Number	 00000006h   
INVALID_HANDLE_VALUE . . . . . .	Number	 -00000001h   
KBDOWN_FLAG  . . . . . . . . . .	Number	 00000001h   
KEY_EVENT  . . . . . . . . . . .	Number	 00000001h   
KEY_MASKS  . . . . . . . . . . .	Number	 0000001Fh   
LEFT_ALT_PRESSED . . . . . . . .	Number	 00000002h   
LEFT_CTRL_PRESSED  . . . . . . .	Number	 00000008h   
MB_ABORTRETRYIGNORE  . . . . . .	Number	 00000002h   
MB_APPLMODAL . . . . . . . . . .	Number	 00000000h   
MB_CANCELTRYCONTINUE . . . . . .	Number	 00000006h   
MB_DEFBUTTON1  . . . . . . . . .	Number	 00000000h   
MB_DEFBUTTON2  . . . . . . . . .	Number	 00000100h   
MB_DEFBUTTON3  . . . . . . . . .	Number	 00000200h   
MB_DEFBUTTON4  . . . . . . . . .	Number	 00000300h   
MB_HELP  . . . . . . . . . . . .	Number	 00004000h   
MB_ICONASTERISK  . . . . . . . .	Number	 00000040h   
MB_ICONERROR . . . . . . . . . .	Number	 00000010h   
MB_ICONEXCLAMATION . . . . . . .	Number	 00000030h   
MB_ICONHAND  . . . . . . . . . .	Number	 00000010h   
MB_ICONINFORMATION . . . . . . .	Number	 00000040h   
MB_ICONQUESTION  . . . . . . . .	Number	 00000020h   
MB_ICONSTOP  . . . . . . . . . .	Number	 00000010h   
MB_ICONWARNING . . . . . . . . .	Number	 00000030h   
MB_OKCANCEL  . . . . . . . . . .	Number	 00000001h   
MB_OK  . . . . . . . . . . . . .	Number	 00000000h   
MB_RETRYCANCEL . . . . . . . . .	Number	 00000005h   
MB_SYSTEMMODAL . . . . . . . . .	Number	 00001000h   
MB_TASKMODAL . . . . . . . . . .	Number	 00002000h   
MB_USERICON  . . . . . . . . . .	Number	 00000080h   
MB_YESNOCANCEL . . . . . . . . .	Number	 00000003h   
MB_YESNO . . . . . . . . . . . .	Number	 00000004h   
MENU_EVENT . . . . . . . . . . .	Number	 00000008h   
MOUSE_EVENT  . . . . . . . . . .	Number	 00000002h   
MessageBox . . . . . . . . . . .	Text   	 MessageBoxA
NULL . . . . . . . . . . . . . .	Number	 00000000h   
NUMLOCK_ON . . . . . . . . . . .	Number	 00000020h   
OPEN_ALWAYS  . . . . . . . . . .	Number	 00000004h   
OPEN_EXISTING  . . . . . . . . .	Number	 00000003h   
PeekConsoleInput . . . . . . . .	Text   	 PeekConsoleInputA
RIGHT_ALT_PRESSED  . . . . . . .	Number	 00000001h   
RIGHT_CTRL_PRESSED . . . . . . .	Number	 00000004h   
ReadConsoleInput . . . . . . . .	Text   	 ReadConsoleInputA
ReadConsole  . . . . . . . . . .	Text   	 ReadConsoleA
SCROLLLOCK_ON  . . . . . . . . .	Number	 00000040h   
SHIFT_MASK . . . . . . . . . . .	Number	 00000010h   
SHIFT_PRESSED  . . . . . . . . .	Number	 00000010h   
STD_ERROR_HANDLE . . . . . . . .	Number	 -0000000Ch   
STD_INPUT_HANDLE . . . . . . . .	Number	 -0000000Ah   
STD_OUTPUT_HANDLE  . . . . . . .	Number	 -0000000Bh   
SetConsoleTitle  . . . . . . . .	Text   	 SetConsoleTitleA
TAB  . . . . . . . . . . . . . .	Number	 00000009h   
TRUE . . . . . . . . . . . . . .	Number	 00000001h   
TRUNCATE_EXISTING  . . . . . . .	Number	 00000005h   
VK_11  . . . . . . . . . . . . .	Number	 000000BDh   
VK_12  . . . . . . . . . . . . .	Number	 000000BBh   
VK_ADD . . . . . . . . . . . . .	Number	 0000006Bh   
VK_BACK  . . . . . . . . . . . .	Number	 00000008h   
VK_CANCEL  . . . . . . . . . . .	Number	 00000003h   
VK_CAPITAL . . . . . . . . . . .	Number	 00000014h   
VK_CLEAR . . . . . . . . . . . .	Number	 0000000Ch   
VK_CONTROL . . . . . . . . . . .	Number	 00000011h   
VK_DECIMAL . . . . . . . . . . .	Number	 0000006Eh   
VK_DELETE  . . . . . . . . . . .	Number	 0000002Eh   
VK_DIVIDE  . . . . . . . . . . .	Number	 0000006Fh   
VK_DOWN  . . . . . . . . . . . .	Number	 00000028h   
VK_END . . . . . . . . . . . . .	Number	 00000023h   
VK_ESCAPE  . . . . . . . . . . .	Number	 0000001Bh   
VK_EXECUTE . . . . . . . . . . .	Number	 0000002Bh   
VK_F10 . . . . . . . . . . . . .	Number	 00000079h   
VK_F11 . . . . . . . . . . . . .	Number	 0000007Ah   
VK_F12 . . . . . . . . . . . . .	Number	 0000007Bh   
VK_F13 . . . . . . . . . . . . .	Number	 0000007Ch   
VK_F14 . . . . . . . . . . . . .	Number	 0000007Dh   
VK_F15 . . . . . . . . . . . . .	Number	 0000007Eh   
VK_F16 . . . . . . . . . . . . .	Number	 0000007Fh   
VK_F17 . . . . . . . . . . . . .	Number	 00000080h   
VK_F18 . . . . . . . . . . . . .	Number	 00000081h   
VK_F19 . . . . . . . . . . . . .	Number	 00000082h   
VK_F1  . . . . . . . . . . . . .	Number	 00000070h   
VK_F20 . . . . . . . . . . . . .	Number	 00000083h   
VK_F21 . . . . . . . . . . . . .	Number	 00000084h   
VK_F22 . . . . . . . . . . . . .	Number	 00000085h   
VK_F23 . . . . . . . . . . . . .	Number	 00000086h   
VK_F24 . . . . . . . . . . . . .	Number	 00000087h   
VK_F2  . . . . . . . . . . . . .	Number	 00000071h   
VK_F3  . . . . . . . . . . . . .	Number	 00000072h   
VK_F4  . . . . . . . . . . . . .	Number	 00000073h   
VK_F5  . . . . . . . . . . . . .	Number	 00000074h   
VK_F6  . . . . . . . . . . . . .	Number	 00000075h   
VK_F7  . . . . . . . . . . . . .	Number	 00000076h   
VK_F8  . . . . . . . . . . . . .	Number	 00000077h   
VK_F9  . . . . . . . . . . . . .	Number	 00000078h   
VK_HELP  . . . . . . . . . . . .	Number	 0000002Fh   
VK_HOME  . . . . . . . . . . . .	Number	 00000024h   
VK_INSERT  . . . . . . . . . . .	Number	 0000002Dh   
VK_LBUTTON . . . . . . . . . . .	Number	 00000001h   
VK_LCONTROL  . . . . . . . . . .	Number	 000000A2h   
VK_LEFT  . . . . . . . . . . . .	Number	 00000025h   
VK_LMENU . . . . . . . . . . . .	Number	 000000A4h   
VK_LSHIFT  . . . . . . . . . . .	Number	 000000A0h   
VK_MENU  . . . . . . . . . . . .	Number	 00000012h   
VK_MULTIPLY  . . . . . . . . . .	Number	 0000006Ah   
VK_NEXT  . . . . . . . . . . . .	Number	 00000022h   
VK_NUMLOCK . . . . . . . . . . .	Number	 00000090h   
VK_NUMPAD0 . . . . . . . . . . .	Number	 00000060h   
VK_NUMPAD1 . . . . . . . . . . .	Number	 00000061h   
VK_NUMPAD2 . . . . . . . . . . .	Number	 00000062h   
VK_NUMPAD3 . . . . . . . . . . .	Number	 00000063h   
VK_NUMPAD4 . . . . . . . . . . .	Number	 00000064h   
VK_NUMPAD5 . . . . . . . . . . .	Number	 00000065h   
VK_NUMPAD6 . . . . . . . . . . .	Number	 00000066h   
VK_NUMPAD7 . . . . . . . . . . .	Number	 00000067h   
VK_NUMPAD8 . . . . . . . . . . .	Number	 00000068h   
VK_NUMPAD9 . . . . . . . . . . .	Number	 00000069h   
VK_PAUSE . . . . . . . . . . . .	Number	 00000013h   
VK_PRINT . . . . . . . . . . . .	Number	 0000002Ah   
VK_PRIOR . . . . . . . . . . . .	Number	 00000021h   
VK_RBUTTON . . . . . . . . . . .	Number	 00000002h   
VK_RCONTROL  . . . . . . . . . .	Number	 000000A3h   
VK_RETURN  . . . . . . . . . . .	Number	 0000000Dh   
VK_RIGHT . . . . . . . . . . . .	Number	 00000027h   
VK_RMENU . . . . . . . . . . . .	Number	 000000A5h   
VK_RSHIFT  . . . . . . . . . . .	Number	 000000A1h   
VK_SCROLL  . . . . . . . . . . .	Number	 00000091h   
VK_SEPARATER . . . . . . . . . .	Number	 0000006Ch   
VK_SHIFT . . . . . . . . . . . .	Number	 00000010h   
VK_SNAPSHOT  . . . . . . . . . .	Number	 0000002Ch   
VK_SPACE . . . . . . . . . . . .	Number	 00000020h   
VK_SUBTRACT  . . . . . . . . . .	Number	 0000006Dh   
VK_TAB . . . . . . . . . . . . .	Number	 00000009h   
VK_UP  . . . . . . . . . . . . .	Number	 00000026h   
WINDOW_BUFFER_SIZE_EVENT . . . .	Number	 00000004h   
WriteConsoleOutputCharacter  . .	Text   	 WriteConsoleOutputCharacterA
WriteConsole . . . . . . . . . .	Text   	 WriteConsoleA
black  . . . . . . . . . . . . .	Number	 00000000h   
blue . . . . . . . . . . . . . .	Number	 00000001h   
brown  . . . . . . . . . . . . .	Number	 00000006h   
buffer . . . . . . . . . . . . .	Byte	 00000085 _DATA	
cifra  . . . . . . . . . . . . .	DWord	 0000009C _DATA	
consoleHandle  . . . . . . . . .	DWord	 00000094 _DATA	
cyan . . . . . . . . . . . . . .	Number	 00000003h   
exit . . . . . . . . . . . . . .	Text   	 INVOKE ExitProcess,0
gray . . . . . . . . . . . . . .	Number	 00000008h   
green  . . . . . . . . . . . . .	Number	 00000002h   
ispisBY  . . . . . . . . . . . .	DWord	 00000081 _DATA	
ispisanoBY . . . . . . . . . . .	DWord	 00000056 _DATA	
lightBlue  . . . . . . . . . . .	Number	 00000009h   
lightCyan  . . . . . . . . . . .	Number	 0000000Bh   
lightGray  . . . . . . . . . . .	Number	 00000007h   
lightGreen . . . . . . . . . . .	Number	 0000000Ah   
lightMagenta . . . . . . . . . .	Number	 0000000Dh   
lightRed . . . . . . . . . . . .	Number	 0000000Ch   
magenta  . . . . . . . . . . . .	Number	 00000005h   
otpornost  . . . . . . . . . . .	DWord	 00000098 _DATA	
pomocna  . . . . . . . . . . . .	DWord	 000000A4 _DATA	
pom  . . . . . . . . . . . . . .	Word	 000000B0 _DATA	
porLVDuz . . . . . . . . . . . .	DWord	 0000007D _DATA	
porLosaVr  . . . . . . . . . . .	Byte	 0000005A _DATA	
porUnDuz . . . . . . . . . . . .	DWord	 00000052 _DATA	
porUnosa . . . . . . . . . . . .	Byte	 00000010 _DATA	
procitanoBY  . . . . . . . . . .	DWord	 00000090 _DATA	
prsten1  . . . . . . . . . . . .	Word	 000000A8 _DATA	
prsten2  . . . . . . . . . . . .	Word	 000000AA _DATA	
prsten3  . . . . . . . . . . . .	Word	 000000AC _DATA	
prsten4  . . . . . . . . . . . .	Word	 000000AE _DATA	
red  . . . . . . . . . . . . . .	Number	 00000004h   
stepen10 . . . . . . . . . . . .	DWord	 000000A0 _DATA	
str1 . . . . . . . . . . . . . .	Byte	 00000000 _DATA	
str2 . . . . . . . . . . . . . .	Byte	 00000009 _DATA	
str3 . . . . . . . . . . . . . .	Byte	 0000000D _DATA	
white  . . . . . . . . . . . . .	Number	 0000000Fh   
wsprintf . . . . . . . . . . . .	Text   	 wsprintfA
yellow . . . . . . . . . . . . .	Number	 0000000Eh   

	   0 Warnings
	   0 Errors
